% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/rm_simile_like.R
\name{rm_simile_like}
\alias{rm_simile_like}
\title{Remove/Replace/Extract Simile (like)}
\usage{
rm_simile_like(text.var, trim = !extract, clean = TRUE,
  pattern = "@rm_simile_like", replacement = "", extract = FALSE,
  dictionary = getOption("regex.library"), ...)
}
\arguments{
\item{text.var}{The text variable.}

\item{trim}{logical.  If \code{TRUE} removes leading and trailing white
spaces.}

\item{clean}{trim logical.  If \code{TRUE} extra white spaces and escaped
character will be removed.}

\item{pattern}{A character string containing a regular expression (or
character string for \code{fixed = TRUE}) to be matched in the given
character vector.}

\item{replacement}{Replacement for matched \code{pattern}.}

\item{extract}{logical.  If \code{TRUE} the person tags are extracted into a
list of vectors.}

\item{dictionary}{A dictionary of canned regular expressions to search within
if \code{pattern} begins with \code{"@rm_"}.}

\item{\dots}{Other arguments passed to \code{\link[base]{gsub}}.}
}
\value{
Returns a character string with person tags removed.
}
\description{
Remove/replace/extract simile (like) from a string.  Useful more so for
the ability to split on these points.
}
\details{
\code{rm_simile_like} is liberal, including phrases like "I like
cookies".  This can be fixed by forcing an article to come after the "like".
Doing so would miss simile phrases such as "It's like cat city in here."
}
\examples{
sims_like <- c(
    "I like cookies.",
    "like a good neighbor",
    "John is like a big horse.",
    "She's like a disaster",
    "Not likely though"
)

rm_simile_like(sims_like)
rm_simile_like(sims_like, extract = TRUE)

\dontrun{
if (!require("pacman")) install.packages("pacman")
pacman::p_load(dplyr)

sims_like[grepl(grab("@rm_simile_like"), sims_like)] \%>\%
    rm_simile_like(replacement="<<SIMILE>>") \%>\%
    strsplit("\\\\s*<<SIMILE>>\\\\s*") \%>\%
    do.call(rbind.data.frame, .) \%>\%
    setNames(paste0("Noun_Phrase_", 1:2))
}
}
\seealso{
\code{\link[base]{gsub}},
\code{\link[stringi]{stri_extract_all_regex}}

Other rm_simile.functions: \code{\link{rm_simile_as}}
}
\keyword{person}
\keyword{tag}
\keyword{twitter}

